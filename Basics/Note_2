DSA IN PYTHON

//LIST >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

lst = [ 1, 2, 3, "hi"]
list() //LIST CONSTRUCTOR

1. MUTABLE : can be modified
2. LINEAR DATA STRUCTURE  : they are ordered
3. MIXED TYPE ELEMENTS : can store data of different data type
4. VARAIBLE LENGTH : List are dynamic
5. ZERO BASED INDEXING : can be access list elements using indexing

//TUPLE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

t = ( 1, 2, 3)
t1 = (2,)
tuple()  //TUPLE CONSTRUCTOR

1. IMMUTABLE : cannot be modified
2. LINEAR DATA STRUCTURE  : they are ordered
3. MIXED TYPE ELEMENTS : can store data of different data type
4. VARAIBLE LENGTH : List are dynamic
5. ZERO BASED INDEXING : can be access list elements using indexing

* IT IS FASTER THAN LIST
* SOMETIME WE DON'T WANT TO CHANGE OUR DATA SO WE USE TUPLE for ACCIDENTAL MODIFICATION   

//SET >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

s = set()  >> SET CONSTRUCTOR
a = set(1,2,3,4)

1. No item can be repeated/ No duplicates
2. SET is unordered
3. SET is mutable : can be modified
4. SET can have only immutable object type as element
5. SET can't be nested
    s = {[1 ,2 ,3 ], 4}    //ERROR

    s = {{1, 2}, 3, 4}    //ERROR


//DICTIONARY >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

KEY and VALUE

dict_name = { key1 : value1, key2 : value2 .... }

KEY >> IMMUTABLE objects or Types(list, tuple, set)
VALUE >> MUTABLE

d1 = {} >> empty dictionary
d2 = { "A" : "ACE"}

d3 = dict() >> DICTIONARY CONSTRUCTOR
del d2['A'] >> Delete

1. Dictionary are UNORDERED i.e we need key
2. Can't access dictionary using index becoz of unorder
3. Dictionary can be nested
    d = {"1" : {1 : 2}}



